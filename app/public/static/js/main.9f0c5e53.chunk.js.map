{"version":3,"sources":["components/App.js","lib/kiln.js","serviceWorker.js","index.js"],"names":["kiln","Kiln","_this","this","url","arguments","length","undefined","Object","classCallCheck","getPackage","fetch","concat","getSchedules","App","props","possibleConstructorReturn","getPrototypeOf","call","state","schedules","updatePackage","then","data","json","object","setState","catch","console","log","updateSchedules","array","setInterval","react_default","a","createElement","Fragment","className","temperature","Link","to","Route","exact","path","render","Component","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAKIA,EAAO,ICDP,SAAAC,IAA8C,IAAAC,EAAAC,KAAlCC,EAAkCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5B,4BAA4BG,OAAAC,EAAA,EAAAD,CAAAL,KAAAF,GAE1CE,KAAKC,IAAMA,EACXD,KAAKO,WAAa,WACd,OAAOC,MAAK,GAAAC,OAAIV,EAAKE,IAAT,uBAEhBD,KAAKU,aAAe,WAChB,OAAOF,MAAK,GAAAC,OAAIV,EAAKE,IAAT,qBDyETU,cA3Eb,SAAAA,EAAYC,GAAM,IAAAb,EAAA,OAAAM,OAAAC,EAAA,EAAAD,CAAAL,KAAAW,IAChBZ,EAAAM,OAAAQ,EAAA,EAAAR,CAAAL,KAAAK,OAAAS,EAAA,EAAAT,CAAAM,GAAAI,KAAAf,KAAMY,KACDI,MAAQ,CACXnB,KAAM,GACNoB,UAAW,IAGblB,EAAKmB,cAAgB,WAEnBrB,EAAKU,aACFY,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAG,GACJvB,EAAKwB,SAAS,CAAC1B,KAAMyB,MAEtBE,MAAMC,QAAQC,MAGnB3B,EAAK4B,gBAAkB,WAErB9B,EAAKa,eACFS,KAAK,SAAAC,GAAI,OAAEA,EAAKC,SAChBF,KAAK,SAAAS,GACJ7B,EAAKwB,SAAS,CAACN,UAAWW,MAE3BJ,MAAMC,QAAQC,MAxBH3B,mFA6BhBC,KAAKkB,gBACLlB,KAAK2B,kBAELE,YAAY7B,KAAKkB,cAAe,sCAIhC,OAAOY,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACLH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAelC,KAAKgB,MAAMnB,KAAKsC,YAA9C,SACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMF,UAAU,QAAQG,GAAG,KAA3B,SACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMF,UAAU,YAAYG,GAAG,cAA/B,aACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMF,UAAU,WAAWG,GAAG,aAA9B,YACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMF,UAAU,WAAWG,GAAG,aAA9B,aAEFP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QAEbJ,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,WAC5B,OACEX,EAAAC,EAAAC,cAAA,uBAIJF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,OAAQ,WACrC,OACEX,EAAAC,EAAAC,cAAA,2BAIJF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,OAAQ,WACpC,OACEX,EAAAC,EAAAC,cAAA,0BAIJF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,OAAQ,WACpC,OACEX,EAAAC,EAAAC,cAAA,mCApEMU,qBEKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASP,OAAOX,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KAAenB,EAAAC,EAAAC,cAACkB,EAAD,OAAyBC,SAASC,eAAe,SDyH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.9f0c5e53.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Route, Link} from \"react-router-dom\"\n\n\nimport Kiln from '../lib/kiln';\nlet kiln = new Kiln()\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      kiln: {},\n      schedules: []\n    }\n\n    this.updatePackage = () => {\n\n      kiln.getPackage()\n        .then(data=>data.json())\n        .then(object => {\n          this.setState({kiln: object})\n        })\n        .catch(console.log)\n    }\n\n    this.updateSchedules = () => {\n\n      kiln.getSchedules()\n        .then(data=>data.json())\n        .then(array => {\n          this.setState({schedules: array})\n        })\n        .catch(console.log)\n    }\n  }\n\n  componentDidMount(){\n    this.updatePackage()\n    this.updateSchedules()\n\n    setInterval(this.updatePackage, 60000)\n  }\n\n  render() {\n    return <>\n      <div className=\"menu\">\n        <div className=\"temperature\">{this.state.kiln.temperature}ÂºF</div>\n        <Link className=\"graph\" to=\"/\">Graph</Link>\n        <Link className=\"schedules\" to=\"/schedules\">Schedules</Link>\n        <Link className=\"controls\" to=\"/controls\">Controls</Link>\n        <Link className=\"settings\" to=\"/settings\">Settings</Link>\n      </div>\n      <div className=\"body\">\n      \n        <Route exact path=\"/\" render={()=>{\n          return (\n            <div>graph</div>\n          )\n        }} />\n\n        <Route exact path=\"/schedules\" render={()=>{\n          return (\n            <div>schedules</div>\n          )\n        }} />\n\n        <Route exact path=\"/controls\" render={()=>{\n          return (\n            <div>controls</div>\n          )\n        }} />\n\n        <Route exact path=\"/settings\" render={()=>{\n          return (\n            <div>settings</div>\n          )\n        }} />\n\n      </div>\n    </>;\n  }\n}\n\nexport default App;\n","\n\nclass Kiln{\n\n    constructor(url = \"http://localhost:2222/api\"){\n\n        this.url = url\n        this.getPackage = ()=>{\n            return fetch(`${this.url}/kiln/get-package`)\n        }\n        this.getSchedules = ()=>{\n            return fetch(`${this.url}/get-schedules`)\n        }\n    }\n\n}\n\nexport default Kiln","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport './scss/app.scss';\nimport App from './components/App';\nimport { BrowserRouter } from \"react-router-dom\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}