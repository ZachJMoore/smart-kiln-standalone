{"version":3,"sources":["components/Graph.js","components/ScheduleItem.js","components/Schedules.js","lib/kiln.js","components/Controls.js","components/App.js","serviceWorker.js","index.js"],"names":["Graph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initChart","data","labels","Chart","refs","ctx","type","datasets","fill","borderColor","backgroundColor","options","animation","duration","legend","display","title","text","fontSize","fontColor","responsive","tooltips","mode","intersect","displayColors","hover","scales","yAxes","ticks","beginAtZero","slice","reverse","label","map","temp","index","concat","react_default","a","createElement","className","ref","Component","ScheduleItem","schedule","name","ramps","ramp","key","rate","target","hold","Schedules","state","schedules","components_ScheduleItem","Kiln","url","arguments","length","undefined","getPackage","fetch","startFiring","headers","Content-Type","method","body","JSON","stringify","stopFiring","getSchedules","kiln","Controls","scheduleID","waiting","changeSelection","event","value","schedulePlaceholder","forEach","id","setState","alert","then","json","res","console","log","message","catch","error","keys","currentSchedule","isFiring","onChange","disabled","onClick","objectToArray","object","App","temperatureLog","updatePackage","updateSchedules","array","setInterval","_this2","Fragment","temperature","Link","to","Route","exact","path","render","components_Graph","components_Schedules","components_Controls","Boolean","window","location","hostname","match","ReactDOM","BrowserRouter","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56c1063e.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport Chart from \"chart.js\"\n\nclass Graph extends Component{\n    constructor(props){\n        super(props);\n        this.initChart = (data, labels)=>{\n            var chart = new Chart(this.refs.ctx, {\n                type: 'line',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        data: data,\n                        fill: true,\n                        borderColor: \"#0c0c0c\",\n                        backgroundColor: \"#0001\"\n                    }]\n                },\n                options: {\n                    animation: {\n                        duration: 0\n                    },\n                    legend: {\n                        display: false\n                    },\n                    title: {\n                        display: true,\n                        text: \"Graph\",\n                        fontSize: 16,\n                        fontColor: \"#f0eeea\"\n                    },\n                    responsive: true,\n                    tooltips: {\n                        mode: \"index\",\n                        intersect: false,\n                        displayColors: false\n                    },\n                    hover: {\n                        mode: \"nearest\",\n                        intersect: true\n                    },\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: false\n                            }\n                        }]\n                    }\n                }\n            });\n        }\n    }\n\n    componentDidMount(){\n        let data = this.props.data.slice().reverse()\n        let label = data.map((temp, index)=>{\n            return `${((index*1)+1)}m`\n        }).reverse()\n        this.initChart(data, label)\n    }\n    componentDidUpdate(){\n        let data = this.props.data.slice().reverse()\n        let label = data.map((temp, index)=>{\n            return `${(index+1)}m`\n        }).reverse()\n        this.initChart(data, label)\n    }\n    render(){\n        return (\n            <div className=\"graph-container\">\n                <canvas ref=\"ctx\" className=\"graph-canvas\"></canvas>\n            </div>\n        )\n    }\n}\n\nexport default Graph","import React from \"react\"\n\nlet ScheduleItem = (props) => (\n    <div className=\"schedule-item\">\n        <p>{props.schedule.name}</p>\n        <table>\n            <tbody>\n                <tr>\n                    <th>Ramp</th>\n                    <th>Rate</th>\n                    <th>Target</th>\n                    <th>Hold</th>\n                </tr>\n                {props.schedule.ramps.map((ramp, index)=>\n                    (<tr key={index}>\n                        <td>{index + 1}</td>\n                        <td>{ramp.rate}</td>\n                        <td>{ramp.target}</td>\n                        <td>{ramp.hold}</td>\n                    </tr>)\n                )}\n            </tbody>\n\n        </table>\n    </div>\n)\n\nexport default ScheduleItem","import React, { Component } from \"react\"\nimport ScheduleItem from \"./ScheduleItem\"\n\nclass Schedules extends Component{\n    constructor(props){\n        super(props);\n        this.state = {}\n    }\n\n    render(){\n        return (\n            <div className=\"schedules-container\">\n\n                {this.props.schedules.map((schedule, index)=>{\n                    return <ScheduleItem schedule={schedule} key={index}/>\n                })}\n\n            </div>\n        )\n    }\n}\n\nexport default Schedules","\n\nclass Kiln{\n\n    constructor(url = \"http://localhost:2222/api\"){\n\n        this.url = url\n        this.getPackage = ()=>{\n            return fetch(`${this.url}/kiln/get-package`)\n        }\n        this.startFiring = (schedule)=>{\n            return fetch(`${this.url}/kiln/start-firing`, {\n                headers: {\"Content-Type\": \"application/json\"},\n                method: \"post\",\n                body: JSON.stringify({schedule: schedule})\n            })\n        }\n        this.stopFiring = ()=>{\n            return fetch(`${this.url}/kiln/stop-firing`)\n        }\n        this.getSchedules = ()=>{\n            return fetch(`${this.url}/get-schedules`)\n        }\n    }\n\n}\n\nexport default Kiln","import React, { Component } from \"react\";\nimport ScheduleItem from \"./ScheduleItem\";\n\nimport Kiln from \"../lib/kiln\"\nlet kiln = new Kiln()\n\nclass Controls extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            scheduleID: 0,\n            schedule: null,\n            waiting: false\n        }\n\n        this.changeSelection = (event) => {\n            let value = event.target.value\n            let schedulePlaceholder = null\n            this.props.state.schedules.forEach((schedule, index)=>{\n                if (schedule.id === value){\n                    schedulePlaceholder = schedule\n                }\n            })\n            this.setState({scheduleID: value, schedule: schedulePlaceholder })\n        }\n\n        this.startFiring = () =>{\n            this.setState({waiting: true})\n            if (!this.state.schedule) {\n                alert(\"Please select a schedule\")\n                this.setState({waiting: false})\n                return\n            }\n            kiln.startFiring(this.state.schedule)\n            .then(data=>data.json())\n            .then((res)=>{\n                console.log(res)\n                alert(res.message)\n            })\n            .catch((error)=>{\n                console.log(error)\n                alert(error.message)\n            })\n            .then(()=>{\n                this.setState({waiting: false})\n            })\n        }\n        this.stopFiring = () =>{\n            this.setState({waiting: true})\n            kiln.stopFiring()\n            .then(data=>data.json())\n            .then((res)=>{\n                console.log(res)\n                alert(res.message)\n            })\n            .catch((error)=>{\n                console.log(error)\n                alert(error.message)\n            })\n            .then(()=>{\n                this.setState({waiting: false})\n            })\n        }\n    }\n\n    componentDidMount(){\n        if (Object.keys(this.props.state.kiln.currentSchedule).length > 0){\n            this.setState({scheduleID: this.props.state.kiln.currentSchedule.id, schedule: this.props.state.kiln.currentSchedule})\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"controls-container\">\n                <div className=\"controls\">\n                    <p>Kiln is currently {this.props.state.kiln.isFiring ? \"on\" : \"off\"}</p>\n                    <br/>\n                    <select value={this.state.scheduleID} onChange={this.changeSelection}>\n                        <option value={0} disabled>Select Schedule</option>\n                        {this.props.state.schedules.map(((schedule, index)=>\n                            <option value={schedule.id} key={index}>{schedule.name}</option>\n                        ))}\n                    </select>\n                    <div className=\"start-stop-container\">\n                        <button disabled={this.state.waiting} className=\"start btn\" onClick={this.startFiring}>Start</button>\n                        <button disabled={this.state.waiting} className=\"stop btn\" onClick={this.stopFiring}>Stop</button>\n                    </div>\n                </div>\n                <div className=\"preview\">\n                    {this.state.schedule && <ScheduleItem schedule={this.state.schedule}/>}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Controls","import React, { Component } from 'react';\nimport {Route, Link} from \"react-router-dom\"\nimport Graph from \"./Graph\"\nimport Schedules from \"./Schedules\"\nimport Controls from \"./Controls\"\n\n\nimport Kiln from '../lib/kiln';\nlet kiln = new Kiln()\n\nlet refreshPage = () =>{\n  window.location.reload();\n}\n\nlet objectToArray = (object)=>{\n  return Object.keys(object).map(key=>{\n      return object[key]\n  })\n}\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      kiln: {\n        temperatureLog: [],\n        currentSchedule: {}\n      },\n      schedules: []\n    }\n\n    this.updatePackage = () => {\n\n      kiln.getPackage()\n        .then(data=>data.json())\n        .then(object => {\n          this.setState({kiln: object})\n        })\n        .catch(console.log)\n    }\n\n    this.updateSchedules = () => {\n\n      kiln.getSchedules()\n        .then(data=>data.json())\n        .then(object => {\n\n          let array = objectToArray(object)\n          this.setState({schedules: array})\n        })\n        .catch(console.log)\n    }\n  }\n\n  componentDidMount(){\n    this.updatePackage()\n    this.updateSchedules()\n\n    setInterval(this.updatePackage, 10000)\n  }\n\n  render() {\n    return <>\n      <div className=\"menu\">\n        <div className=\"temperature\">{this.state.kiln.temperature}ºF</div>\n        <Link className=\"graph\" to=\"/\">Graph</Link>\n        <Link className=\"schedules\" to=\"/schedules\">Schedules</Link>\n        <Link className=\"controls\" to=\"/controls\">Controls</Link>\n        <Link className=\"settings\" to=\"/settings\">Settings</Link>\n        {/* <button onClick={refreshPage} className=\"refresh-button\"><svg aria-hidden=\"true\" data-prefix=\"fas\" data-icon=\"redo\" className=\"\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path fill=\"currentColor\" d=\"M500.333 0h-47.411c-6.853 0-12.314 5.729-11.986 12.574l3.966 82.759C399.416 41.899 331.672 8 256.001 8 119.34 8 7.899 119.526 8 256.187 8.101 393.068 119.096 504 256 504c63.926 0 122.202-24.187 166.178-63.908 5.113-4.618 5.354-12.561.482-17.433l-33.971-33.971c-4.466-4.466-11.64-4.717-16.38-.543C341.308 415.448 300.606 432 256 432c-97.267 0-176-78.716-176-176 0-97.267 78.716-176 176-176 60.892 0 114.506 30.858 146.099 77.8l-101.525-4.865c-6.845-.328-12.574 5.133-12.574 11.986v47.411c0 6.627 5.373 12 12 12h200.333c6.627 0 12-5.373 12-12V12c0-6.627-5.373-12-12-12z\"></path></svg></button> */}\n      </div>\n      <div className=\"body\">\n        <Route exact path=\"/\" render={()=>{\n          return (\n            <Graph data={this.state.kiln.temperatureLog} />\n          )\n        }} />\n\n        <Route exact path=\"/schedules\" render={()=>{\n          return (\n            <Schedules schedules={this.state.schedules}/>\n          )\n        }} />\n\n        <Route exact path=\"/controls\" render={()=>{\n          return (\n            <Controls state={this.state}/>\n          )\n        }} />\n\n        <Route exact path=\"/settings\" render={()=>{\n          return (\n            <div className=\"settings-container\">settings</div>\n          )\n        }} />\n\n      </div>\n    </>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport './scss/app.scss';\nimport App from './components/App';\nimport { BrowserRouter } from \"react-router-dom\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}